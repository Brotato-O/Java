package GUI;

import java.sql.*;
import javax.swing.*;
import javax.swing.table.*;
import java.awt.*;
//import java.beans.Statement;
import java.math.BigDecimal;
import java.net.URL;
//import java.security.Timestamp;

public class thucan extends JPanel {

    private DefaultTableModel cartModel;
    private JTable cartTable;
    private JLabel totalLabel;

    public thucan() {
        this.setLayout(new BorderLayout(10, 10));
        this.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        // ========== DANH S√ÅCH M√ìN ƒÇN ===========
        JPanel foodPanel = new JPanel(new GridLayout(2, 3, 15, 15));
        foodPanel.setBorder(BorderFactory.createTitledBorder("Ch·ªçn m√≥n ƒÉn"));

        String[] foods = {"M√¨ x√†o", "C∆°m g√†", "Tr√† s·ªØa", "Khoai t√¢y", "G√† r√°n"};
        int[] prices = {30000, 40000, 25000, 20000, 35000};
        String[] imgNames = {
            "../img/mixao.jpg",
            "../img/comga.jpg",
            "../img/trasua.jpg",
            "../img/khoaitay.jpg",
            "../img/garan.jpg"
        };

        // ========== B·∫¢NG GI·ªé H√ÄNG ===========
        cartModel = new DefaultTableModel(new Object[]{"T√™n m√≥n", "S·ªë l∆∞·ª£ng", "ƒê∆°n gi√°"}, 0) {
            @Override
            public Class<?> getColumnClass(int columnIndex) {
                return columnIndex == 1 ? Integer.class : Object.class;
            }

            @Override
            public boolean isCellEditable(int row, int column) {
                return column == 1; // ch·ªâ c·ªôt s·ªë l∆∞·ª£ng ch·ªânh ƒë∆∞·ª£c
            }
        };

        cartTable = new JTable(cartModel);
        cartTable.setRowHeight(30);
        cartTable.getColumnModel().getColumn(1).setCellEditor(new SpinnerEditor(cartTable));

        for (int i = 0; i < foods.length; i++) {
            ImageIcon icon;
            URL imgURL = getClass().getResource(imgNames[i]);
            if (imgURL != null) {
                icon = new ImageIcon(new ImageIcon(imgURL).getImage().getScaledInstance(120, 80, Image.SCALE_SMOOTH));
            } else {
                icon = new ImageIcon(); // ·∫£nh tr·ªëng n·∫øu kh√¥ng t√¨m th·∫•y
            }
            foodPanel.add(createFoodBox(foods[i], prices[i], icon));
        }

        // ========== PANEL B√äN PH·∫¢I ==========
        JPanel rightPanel = new JPanel(new BorderLayout(5, 5));
        rightPanel.setBorder(BorderFactory.createTitledBorder("M√≥n ƒë√£ ch·ªçn"));
        JScrollPane scrollPane = new JScrollPane(cartTable);
        rightPanel.add(scrollPane, BorderLayout.CENTER);

        // ========== N√öT V√Ä T·ªîNG TI·ªÄN ==========
        JButton datDonButton = new JButton("ƒê·∫∑t ƒë∆°n");
                datDonButton.addActionListener(e -> datDonHang());

        totalLabel = new JLabel("T·ªïng ti·ªÅn: 0 ƒë");

        JPanel bottomPanel = new JPanel(new BorderLayout());
        bottomPanel.add(datDonButton, BorderLayout.EAST);
        bottomPanel.add(totalLabel, BorderLayout.WEST);

        this.add(foodPanel, BorderLayout.CENTER);
        this.add(rightPanel, BorderLayout.EAST);
        cartModel.addTableModelListener(e -> updateTotalLabel());
        this.add(bottomPanel, BorderLayout.SOUTH);
    }

    // T·∫†O M·ªñI M√ìN ƒÇN
    private JPanel createFoodBox(String name, int price, ImageIcon icon) {
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        panel.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(Color.GRAY),
                BorderFactory.createEmptyBorder(10, 10, 10, 10)
        ));

        JLabel nameLabel = new JLabel(name + " - " + price + "ƒë", JLabel.CENTER);
        nameLabel.setAlignmentX(Component.CENTER_ALIGNMENT);

        JLabel imageLabel = new JLabel(icon);
        imageLabel.setAlignmentX(Component.CENTER_ALIGNMENT);

        JButton addButton = new JButton("Th√™m");
        addButton.setAlignmentX(Component.CENTER_ALIGNMENT);
        addButton.addActionListener(e -> {
            cartModel.addRow(new Object[]{name, 1, price});
            updateTotalLabel();
        });

        panel.add(nameLabel);
        panel.add(Box.createVerticalStrut(10));
        panel.add(imageLabel);
        panel.add(Box.createVerticalStrut(10));
        panel.add(addButton);

        return panel;
    }

    // C·∫¨P NH·∫¨T T·ªîNG TI·ªÄN
    private void updateTotalLabel() {
        int total = 0;
        for (int i = 0; i < cartModel.getRowCount(); i++) {
            int qty = (int) cartModel.getValueAt(i, 1);
            int price = (int) cartModel.getValueAt(i, 2);
            total += qty * price;
        }
        totalLabel.setText("T·ªïng ti·ªÅn: " + total + " ƒë");
    }
    
    private void datDonHang() {
    if (cartModel.getRowCount() == 0) {
        JOptionPane.showMessageDialog(this, "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt m√≥n ƒÉn.");
        return;
    }

    try (Connection conn = DAL.DBConnect.getConnection()) {
        if (conn == null) {
            JOptionPane.showMessageDialog(this, "Kh√¥ng th·ªÉ k·∫øt n·ªëi database.");
            return;
        }

        conn.setAutoCommit(false); // b·∫Øt ƒë·∫ßu transaction

        int maKH = 1;   // üëà T·∫°m th·ªùi m√£ kh√°ch hardcode
        int maMay = 2;  // üëà T·∫°m th·ªùi m√£ m√°y c≈©ng hardcode, b·∫°n c√≥ th·ªÉ l·∫•y t·ª´ m√°y ƒëang ch·ªçn
        Timestamp now = new Timestamp(System.currentTimeMillis());
        BigDecimal tongTien = BigDecimal.ZERO;

        // === 1. Insert v√†o DonHangThucAn
        String insertDon = "INSERT INTO DonHangThucAn (MaKH, MaMay, NgayDat, TongTien, TrangThai, created_at) VALUES (?, ?, ?, ?, ?, ?)";
        PreparedStatement donStmt = conn.prepareStatement(insertDon, Statement.RETURN_GENERATED_KEYS);
        for (int i = 0; i < cartModel.getRowCount(); i++) {
            int qty = (int) cartModel.getValueAt(i, 1);
            int price = (int) cartModel.getValueAt(i, 2);
            tongTien = tongTien.add(BigDecimal.valueOf(qty * price));
        }

        donStmt.setInt(1, maKH);
        donStmt.setInt(2, maMay);
        donStmt.setTimestamp(3, now);
        donStmt.setBigDecimal(4, tongTien);
        donStmt.setString(5, "DangCho");
        donStmt.setTimestamp(6, now);
        donStmt.executeUpdate();

        ResultSet rs = donStmt.getGeneratedKeys();
        int maDH = -1;
        if (rs.next()) {
            maDH = rs.getInt(1);
        } else {
            conn.rollback();
            JOptionPane.showMessageDialog(this, "Kh√¥ng th·ªÉ t·∫°o ƒë∆°n h√†ng.");
            return;
        }

        // === 2. Th√™m chi ti·∫øt & c·∫≠p nh·∫≠t kho
        for (int i = 0; i < cartModel.getRowCount(); i++) {
            String tenMon = (String) cartModel.getValueAt(i, 0);
            int qty = (int) cartModel.getValueAt(i, 1);

            // T√¨m m√£ th·ª©c ƒÉn t·ª´ t√™n
            PreparedStatement findStmt = conn.prepareStatement("SELECT MaThucAn FROM ThucAn WHERE TenThucAn = ?");
            findStmt.setString(1, tenMon);
            ResultSet rsFind = findStmt.executeQuery();

            int maTA = -1;
            if (rsFind.next()) {
                maTA = rsFind.getInt("MaThucAn");
            } else {
                conn.rollback();
                JOptionPane.showMessageDialog(this, "Kh√¥ng t√¨m th·∫•y m√≥n: " + tenMon);
                return;
            }

            // Tr·ª´ kho
            PreparedStatement updateKho = conn.prepareStatement("UPDATE KhoThucAn SET SoLuong = SoLuong - ? WHERE MaThucAn = ?");
            updateKho.setInt(1, qty);
            updateKho.setInt(2, maTA);
            int updated = updateKho.executeUpdate();

            if (updated == 0) {
                conn.rollback();
                JOptionPane.showMessageDialog(this, "Kh√¥ng ƒë·ªß h√†ng trong kho cho m√≥n: " + tenMon);
                return;
            }

            // TODO: Ch∆∞a c√≥ b·∫£ng chi ti·∫øt ƒë∆°n h√†ng, n·∫øu c·∫ßn th√™m b·∫£ng `ChiTietDonThucAn` th√¨ s·∫Ω insert ·ªü ƒë√¢y
        }

        conn.commit();
        JOptionPane.showMessageDialog(this, "ƒê·∫∑t m√≥n th√†nh c√¥ng!");

        // Xo√° gi·ªè h√†ng sau khi ƒë·∫∑t
        cartModel.setRowCount(0);
        updateTotalLabel();

    } catch (Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "L·ªói khi ƒë·∫∑t m√≥n: " + ex.getMessage());
    }
}


    // EDITOR SPINNER CHO C·ªòT S·ªê L∆Ø·ª¢NG
    class SpinnerEditor extends AbstractCellEditor implements TableCellEditor {
    private final JSpinner spinner;
    private final JTable table;

    public SpinnerEditor(JTable table) {
        this.table = table;
        spinner = new JSpinner(new SpinnerNumberModel(1, 0, 100, 1)); // min = 0, max = 100
        spinner.addChangeListener(e -> {
    int row = table.getEditingRow(); // L·∫•y d√≤ng hi·ªán t·∫°i ƒëang ch·ªânh s·ª≠a
    int value = (int) spinner.getValue(); // L·∫•y gi√° tr·ªã c·ªßa spinner
    System.out.println("Gi√° tr·ªã m·ªõi c·ªßa spinner: " + value); 

    if (row >= 0 && row < table.getRowCount()) {
        System.out.println("D√≤ng h·ª£p l·ªá: " + row); 

        DefaultTableModel model = (DefaultTableModel) table.getModel();

        if (value == 0) {
            System.out.println("ƒêang x√≥a m√≥n ƒÉn t·∫°i d√≤ng: " + row);
            fireEditingStopped(); // C·∫≠p nh·∫≠t model tr∆∞·ªõc khi x√≥a
            model.removeRow(row);

            if (table.getRowCount() > 0) {
                updateTotalLabel(); // N·∫øu c√≤n d√≤ng, c·∫≠p nh·∫≠t t·ªïng ti·ªÅn
            } else {
                totalLabel.setText("T·ªïng ti·ªÅn: 0 ƒë");
            }
        } else {
            fireEditingStopped(); // ‚úÖ C·∫≠p nh·∫≠t model v·ªõi s·ªë l∆∞·ª£ng m·ªõi
            updateTotalLabel();   // ‚úÖ R·ªìi m·ªõi c·∫≠p nh·∫≠t t·ªïng ti·ªÅn
        }
    } else {
        System.out.println("D√≤ng kh√¥ng h·ª£p l·ªá ho·∫∑c b·∫£ng tr·ªëng.");
    }
});


    }

    @Override
    public Object getCellEditorValue() {
        return spinner.getValue();
    }

    @Override
    public Component getTableCellEditorComponent(JTable table, Object value,
                                                 boolean isSelected, int row, int column) {
        if (value instanceof Integer) {
            spinner.setValue(value);
        } else {
            spinner.setValue(1); // Default value if value is not an integer
        }
        return spinner;
    }
}


}
